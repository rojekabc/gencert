#!/bin/sh
# Argumenty
#	nazwa CA

source functions/ask.function

CAKEYBITS='1024';
CAKEYTYPE='RSA';
CACOUNTRYNAME='PL';
CADAYS='30';

ask_application $0 CACOMMONNAME CAKEYBITS CAKEYTYPE CACOUNTRYNAME CALOCALITYNAME CAORGANIZATIONALNAME CAEMAIL CADAYS CAPKCS12PASS;

# check openssl command exists
OPENSSL=`which openssl`;
if test "$?" != "0"; then
	echo "Cannot find openssl";
	exit -1;
elif test -z "$OPENSSL"; then
	echo "Cannot find openssl";
	exit -1;
elif ! test -x "$OPENSSL"; then
	echo "Cannot execute openssl (no rights)";
	exit -1;
fi

if test -z $CACOMMONNAME; then
	echo "Give a name of created CA.";
	exit;
fi

# Check already exists
if test -e $CACOMMONNAME; then
	echo "CA with name [$CACOMMONNAME] already exists";
	exit;
fi

echo "Create CA [$CACOMMONNAME]";
mkdir $CACOMMONNAME

echo "Creating base files";
cd $CACOMMONNAME;
ln -s ../genCert genCert;
ln -s ../reCert reCert;
ln -s ../createCA createCA;
ln -s ../createCRL createCRL;
ln -s ../default.ca default.ca;
ln -s ../default.ca.conf;
ln -s ../default.cer default.cer;
ln -s ../revokeCert;
ln -s ../functions;
touch certindex;
echo "01" >> certserial;
echo "01" >> crlnumber;
cd ..;

echo "Creating configuration file";
CAPROFILE="$CACOMMONNAME.ca";

echo "cp $0.env $CACOMMONNAME/$CAPROFILE";
cp $0.env $CACOMMONNAME/$CAPROFILE;

while read line; do
	eval echo $line >> $CACOMMONNAME/$CAPROFILE.conf;
done < "default.ca.conf";
# exit -1;

echo "Generating key";
case $CAKEYTYPE in
	rsa | RSA )
		openssl genrsa -out $CACOMMONNAME/$CACOMMONNAME.pem.key $CAKEYBITS;
		;;
	dsa | DSA )
		openssl gendsa -out $CACOMMONNAME/$CACOMMONNAME.pem.key;
		;;
	* )
		echo "Unrecognized key type [$CAKEYTYPE]";
		exit;
		;;
esac;

echo "Generating request";
rm -f $CACOMMONNAME/$CACOMMONNAME.cnf;
while read line; do
	eval echo $line >> $CACOMMONNAME/$CACOMMONNAME.cnf;
done < "default.ca";
if test -f $CACOMMONNAME/$CACOMMONNAME.cnf; then
	openssl req -out $CACOMMONNAME/$CACOMMONNAME.req -new -key $CACOMMONNAME/$CACOMMONNAME.pem.key -keyform PEM -config $CACOMMONNAME/$CACOMMONNAME.cnf -batch
#	openssl req -out $CACOMMONNAME/$CACOMMONNAME.pem.cer -new -key $CACOMMONNAME/$CACOMMONNAME.pem.key -keyform PEM -x509 -days `cat $CACOMMONNAME.days` -config $CACOMMONNAME/$CACOMMONNAME.cnf -batch
else
	echo "Configuration file not generated";
fi

# check certificate is self-signed or signed by other CA
DIRNAME=`pwd`;
DIRNAME=`basename ${DIRNAME}`;
if test -f $DIRNAME.ca; then
	echo "Generating certificate signed by [$DIRNAME] CA"
	# it's CA signed by other CA
	# TODO: Check exists of all needed files
	openssl x509 -inform PEM -outform DER -in $CACOMMONNAME/$CACOMMONNAME.req -out $CACOMMONNAME/$CACOMMONNAME.der.cer -CA $DIRNAME.pem.cer -CAkey $DIRNAME.pem.key -CAserial serial -CAcreateserial -req -extensions v3_ca -extfile $CACOMMONNAME/$CACOMMONNAME.cnf -days $CADAYS
else
	echo "Generating self-singed certificate (ROOT)"
	# it's self-signed CA (root)
	openssl x509 -inform PEM -outform DER -in $CACOMMONNAME/$CACOMMONNAME.req -out $CACOMMONNAME/$CACOMMONNAME.der.cer -req -extensions v3_ca -extfile $CACOMMONNAME/$CACOMMONNAME.cnf -days $CADAYS -signkey $CACOMMONNAME/$CACOMMONNAME.pem.key
fi;

openssl x509 -inform DER -outform PEM -in $CACOMMONNAME/$CACOMMONNAME.der.cer -out $CACOMMONNAME/$CACOMMONNAME.pem.cer
#openssl x509 -inform PEM -outform DER -in $CACOMMONNAME/$CACOMMONNAME.pem.cer -out $CACOMMONNAME/$CACOMMONNAME.der.cer

# generowanie klucza jako PKCS8
echo "Generating PKCS#8 without crypting prhase"
openssl pkcs8 -in $CACOMMONNAME/$CACOMMONNAME.pem.key -out $CACOMMONNAME/$CACOMMONNAME.der.key -inform PEM -outform DER -topk8 -nocrypt

echo "Generating PKCS#12 with password"
openssl pkcs12 -out $CACOMMONNAME/$CACOMMONNAME.pfx -clcerts -nodes -export -in $CACOMMONNAME/$CACOMMONNAME.pem.cer -inkey $CACOMMONNAME/$CACOMMONNAME.pem.key -password pass:$CAPKCS12PASS
