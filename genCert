#!/bin/sh
# check openssl command exists
OPENSSL=`which openssl`;
if test "$?" != "0"; then
	echo "Cannot find openssl";
	exit -1;
elif test -z "$OPENSSL"; then
	echo "Cannot find openssl";
	exit -1;
elif ! test -x "$OPENSSL"; then
	echo "Cannot execute openssl (no rights)";
	exit -1;
fi

if test -z $1; then
	echo "No configuration name";
	exit;
fi

echo "Creating configuration file";
CERTPROPFILE="$1.certconf";
if test -f $CERTPROPFILE; then
	# Load user configuration, if exists
	source ./$CERTPROPFILE
fi

if test -z "$CERTKEYBITS"; then
	CERTKEYBITS='1024';
fi
if test -z "$CERTKEYTYPE"; then
	CERTKEYTYPE='RSA';
fi
if test -z "$CERTCOUNTRYNAME"; then
	CERTCOUNTRYNAME='PL';
fi
if test -z "$CERTLOCALITYNAME"; then
	CERTLOCALITYNAME='Unknown';
fi
if test -z "$CERTORGANIZATIONALNAME"; then
	CERTORGANIZATIONALNAME='Unknown';
fi
if test -z "$CERTCOMMONNAME"; then
	CERTCOMMONNAME="$1";
fi
if test -z "$CERTEMAIL"; then
	CERTEMAIL="unknown@email.pl";
fi
if test -z "$CERTDAYS"; then
	CERTDAYS="30";
fi
if test -z "$CERTPKCS12PASS"; then
	CERTPKCS12PASS="test";
fi

echo "CERTNAME='$1'" > $CERTPROPFILE;
echo "CERTKEYBITS='$CERTKEYBITS'" >> $CERTPROPFILE;
echo "CERTCOUNTRYNAME='$CERTCOUNTRYNAME'" >> $CERTPROPFILE;
echo "CERTLOCALITYNAME='$CERTLOCALITYNAME'" >> $CERTPROPFILE;
echo "CERTORGANIZATIONALNAME='$CERTORGANIZATIONALNAME'" >> $CERTPROPFILE;
echo "CERTCOMMONNAME='$CERTCOMMONNAME'" >> $CERTPROPFILE;
echo "CERTEMAIL='$CERTEMAIL'" >> $CERTPROPFILE;
echo "CERTKEYTYPE='$CERTKEYTYPE'" >> $CERTPROPFILE;
echo "CERTDAYS='$CERTDAYS'" >> $CERTPROPFILE;
echo "CERTPKCS12PASS='$CERTPKCS12PASS'" >> $CERTPROPFILE;
chmod 700 $CERTPROPFILE;

echo "Genearting key"
case $CERTKEYTYPE in
	rsa | RSA )
		openssl genrsa -out $1.pem.key $CERTKEYBITS;
		;;
	dsa | DSA )
		openssl gendsa -out $1.pem.key;
		;;
	* )
		echo "Unrecognized key type [$CERTKEYTYPE]";
		exit;
		;;
esac;

echo "Generating request"
rm -f $1.cnf;
while read line; do
	eval echo $line >> $1.cnf;
done < "default.cer";
openssl req -out $1.req -new -key $1.pem.key -keyform PEM -days $CERTDAYS -config $1.cnf -batch

# check certificate is self-signed or signed by other CA
DIRNAME=`pwd`;
DIRNAME=${DIRNAME##*/};
if test -f $DIRNAME.ca; then
	echo "Generating certificate signed by [$DIRNAME] CA"
	# signed by CA
	openssl x509 -inform PEM -outform DER -in $1.req -out $1.der.cer -CA $DIRNAME.pem.cer -CAkey $DIRNAME.pem.key -CAserial serial -CAcreateserial -req -extensions usr_cert -extfile $1.cnf
else
	# self signed
	openssl x509 -inform PEM -outform DER -in $1.req -out $1.der.cer -req -extensions usr_cert -extfile $1.cnf -signkey $1.pem.key
fi
openssl x509 -inform DER -outform PEM -in $1.der.cer -out $1.pem.cer

echo "Generating PKCS#8"
openssl pkcs8 -in $1.pem.key -out $1.der.key -inform PEM -outform DER -topk8 -nocrypt

echo "Generating PKCS#12"
openssl pkcs12 -out $1.pfx -clcerts -nodes -export -in $1.pem.cer -inkey $1.pem.key -password pass:$CERTPKCS12PASS
