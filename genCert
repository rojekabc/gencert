#!/bin/sh
# check openssl command exists
OPENSSL=`which openssl`;
if test "$?" != "0"; then
	echo "Cannot find openssl";
	exit -1;
elif test -z "$OPENSSL"; then
	echo "Cannot find openssl";
	exit -1;
elif ! test -x "$OPENSSL"; then
	echo "Cannot execute openssl (no rights)";
	exit -1;
fi

CERTKEYBITS='1024';
CERTKEYTYPE='RSA';
CERTCOUNTRYNAME='PL';
CERTDAYS="30";
source functions/ask.function;
ask_application $0 CERTCOMMONNAME CERTKEYBITS CERTKEYTYPE CERTCOUNTRYNAME CERTLOCALITYNAME CERTORGANIZATIONALNAME CERTEMAIL CERTDAYS CERTPKCS12PASS

if test -z $CERTCOMMONNAME; then
	echo "No configuration name";
	exit;
fi

echo "Creating configuration file";
CERTPROPFILE="$CERTCOMMONNAME.certconf";
if test -f $CERTPROPFILE; then
	# Load user configuration, if exists
	source ./$CERTPROPFILE
fi

cp $0.env $CERTPROPFILE;
chmod 700 $CERTPROPFILE;

echo "Genearting key"
case $CERTKEYTYPE in
	rsa | RSA )
		openssl genrsa -out $CERTCOMMONNAME.pem.key $CERTKEYBITS;
		;;
	dsa | DSA )
		openssl gendsa -out $CERTCOMMONNAME.pem.key;
		;;
	* )
		echo "Unrecognized key type [$CERTKEYTYPE]";
		exit;
		;;
esac;

echo "Generating request"
rm -f $CERTCOMMONNAME.cnf;
while read line; do
	eval echo $line >> $CERTCOMMONNAME.cnf;
done < "default.cer";
openssl req -out $CERTCOMMONNAME.req -new -key $CERTCOMMONNAME.pem.key -keyform PEM -days $CERTDAYS -config $CERTCOMMONNAME.cnf -batch

# check certificate is self-signed or signed by other CA
DIRNAME=`pwd`;
DIRNAME=${DIRNAME##*/};
if test -f $DIRNAME.ca; then
	echo "Generating certificate signed by [$DIRNAME] CA"
	# signed by CA
	# openssl x509 -inform PEM -outform DER -in $CERTCOMMONNAME.req -out $CERTCOMMONNAME.der.cer -CA $DIRNAME.pem.cer -CAkey $DIRNAME.pem.key -CAserial serial -CAcreateserial -req -extensions usr_cert -extfile $CERTCOMMONNAME.cnf
	openssl ca -batch -config $DIRNAME.ca.conf -notext -in $CERTCOMMONNAME.req -out $CERTCOMMONNAME.pem.cer
else
	# self signed
	openssl x509 -inform PEM -outform DER -in $CERTCOMMONNAME.req -out $CERTCOMMONNAME.der.cer -req -extensions usr_cert -extfile $CERTCOMMONNAME.cnf -signkey $CERTCOMMONNAME.pem.key
fi
if [[ -f $CERTCOMMONNAME.der.cer ]]; then
	openssl x509 -inform DER -outform PEM -in $CERTCOMMONNAME.der.cer -out $CERTCOMMONNAME.pem.cer
fi;
if [[ -f $CERTCOMMONNAME.pem.cer ]]; then
	openssl x509 -inform PEM -outform DER -in $CERTCOMMONNAME.pem.cer -out $CERTCOMMONNAME.der.cer
fi;

echo "Generating PKCS#8"
openssl pkcs8 -in $CERTCOMMONNAME.pem.key -out $CERTCOMMONNAME.der.key -inform PEM -outform DER -topk8 -nocrypt

echo "Generating PKCS#12"
openssl pkcs12 -out $CERTCOMMONNAME.pfx -clcerts -nodes -export -in $CERTCOMMONNAME.pem.cer -inkey $CERTCOMMONNAME.pem.key -password pass:$CERTPKCS12PASS
